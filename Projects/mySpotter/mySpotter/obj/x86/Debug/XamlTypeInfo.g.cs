//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace mySpotter
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace mySpotter.mySpotter_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[69];
            _typeNameTable[0] = "mySpotterLibrary.Common.BooleanNegationConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "mySpotterLibrary.Common.ValueToStringConverter";
            _typeNameTable[3] = "mySpotterLibrary.Common.ColorStringConverter";
            _typeNameTable[4] = "mySpotterLibrary.Common.DoubleToIntConverter";
            _typeNameTable[5] = "mySpotterLibrary.Common.ValueToFontFamilyConverter";
            _typeNameTable[6] = "mySpotterLibrary.Common.ComboBoxItemToStringConverter";
            _typeNameTable[7] = "mySpotterLibrary.Common.BooleanToVisibilityConverter";
            _typeNameTable[8] = "mySpotterLibrary.Common.NullableBooleanToBooleanConverter";
            _typeNameTable[9] = "mySpotterLibrary.Common.StringToBrushConverter";
            _typeNameTable[10] = "mySpotterLibrary.ViewModels.MainPageViewModel";
            _typeNameTable[11] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[12] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[13] = "String";
            _typeNameTable[14] = "Boolean";
            _typeNameTable[15] = "mySpotterLibrary.ViewModels.UserGunSetupViewModel";
            _typeNameTable[16] = "mySpotterLibrary.Models.UserGunSetup";
            _typeNameTable[17] = "mySpotterLibrary.Models.GunCatalog";
            _typeNameTable[18] = "mySpotterLibrary.Helpers.DatabaseHelper";
            _typeNameTable[19] = "System.Windows.Input.ICommand";
            _typeNameTable[20] = "GalaSoft.MvvmLight.Command.RelayCommand";
            _typeNameTable[21] = "mySpotter.Views.UserGunSetupView";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[23] = "mySpotter.Views.PiManagerView";
            _typeNameTable[24] = "mySpotter.MainPage";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[26] = "mySpotter.Views.MainPageView";
            _typeNameTable[27] = "mySpotter.MyTitleBar";
            _typeNameTable[28] = "Double";
            _typeNameTable[29] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[30] = "mySpotter.NavigationRootPage";
            _typeNameTable[31] = "mySpotterLibrary.Models.MyArmory";
            _typeNameTable[32] = "mySpotterLibrary.ViewModels.GunCatalogViewModel";
            _typeNameTable[33] = "mySpotterLibrary.Common.BindableBase";
            _typeNameTable[34] = "Int32";
            _typeNameTable[35] = "mySpotterLibrary.Models.AmmoList";
            _typeNameTable[36] = "mySpotterLibrary.Models.ScopeList";
            _typeNameTable[37] = "GalaSoft.MvvmLight.Command.RelayCommand`1<mySpotterLibrary.Models.Gun>";
            _typeNameTable[38] = "mySpotter.Views.GunCatalogPage";
            _typeNameTable[39] = "mySpotter.Common.NavigationHelper";
            _typeNameTable[40] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[41] = "mySpotter.Views.LoginControl";
            _typeNameTable[42] = "mySpotterLibrary.ViewModels.RaspberryPiManager";
            _typeNameTable[43] = "System.Collections.ObjectModel.ObservableCollection`1<mySpotterLibrary.Models.RaspberryPiInfo>";
            _typeNameTable[44] = "System.Collections.ObjectModel.Collection`1<mySpotterLibrary.Models.RaspberryPiInfo>";
            _typeNameTable[45] = "mySpotterLibrary.Models.RaspberryPiInfo";
            _typeNameTable[46] = "GalaSoft.MvvmLight.Command.RelayCommand`1<mySpotterLibrary.Models.RaspberryPiInfo>";
            _typeNameTable[47] = "mySpotter.Views.RecentHistoryView";
            _typeNameTable[48] = "mySpotterLibrary.ViewModels.SessionViewModel";
            _typeNameTable[49] = "Windows.UI.Xaml.Media.Imaging.WriteableBitmap";
            _typeNameTable[50] = "System.Collections.ObjectModel.ObservableCollection`1<mySpotterLibrary.Models.LogMessage>";
            _typeNameTable[51] = "System.Collections.ObjectModel.Collection`1<mySpotterLibrary.Models.LogMessage>";
            _typeNameTable[52] = "mySpotterLibrary.Models.LogMessage";
            _typeNameTable[53] = "mySpotterLibrary.Helpers.ImageHelper";
            _typeNameTable[54] = "Byte[]";
            _typeNameTable[55] = "System.Array";
            _typeNameTable[56] = "Byte";
            _typeNameTable[57] = "System.ValueType";
            _typeNameTable[58] = "mySpotter.Views.SessionPage";
            _typeNameTable[59] = "mySpotterLibrary.ViewModels.SetupSessionViewModel";
            _typeNameTable[60] = "mySpotter.Views.SetupSessionView";
            _typeNameTable[61] = "mySpotter.Views.UserGunSetupDetailPage";
            _typeNameTable[62] = "mySpotterLibrary.Common.NavigationHelper";
            _typeNameTable[63] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[64] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[65] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[66] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[67] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[68] = "Microsoft.Xaml.Interactions.Core.CallMethodAction";

            _typeTable = new global::System.Type[69];
            _typeTable[0] = typeof(global::mySpotterLibrary.Common.BooleanNegationConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::mySpotterLibrary.Common.ValueToStringConverter);
            _typeTable[3] = typeof(global::mySpotterLibrary.Common.ColorStringConverter);
            _typeTable[4] = typeof(global::mySpotterLibrary.Common.DoubleToIntConverter);
            _typeTable[5] = typeof(global::mySpotterLibrary.Common.ValueToFontFamilyConverter);
            _typeTable[6] = typeof(global::mySpotterLibrary.Common.ComboBoxItemToStringConverter);
            _typeTable[7] = typeof(global::mySpotterLibrary.Common.BooleanToVisibilityConverter);
            _typeTable[8] = typeof(global::mySpotterLibrary.Common.NullableBooleanToBooleanConverter);
            _typeTable[9] = typeof(global::mySpotterLibrary.Common.StringToBrushConverter);
            _typeTable[10] = typeof(global::mySpotterLibrary.ViewModels.MainPageViewModel);
            _typeTable[11] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[12] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[13] = typeof(global::System.String);
            _typeTable[14] = typeof(global::System.Boolean);
            _typeTable[15] = typeof(global::mySpotterLibrary.ViewModels.UserGunSetupViewModel);
            _typeTable[16] = typeof(global::mySpotterLibrary.Models.UserGunSetup);
            _typeTable[17] = typeof(global::mySpotterLibrary.Models.GunCatalog);
            _typeTable[18] = typeof(global::mySpotterLibrary.Helpers.DatabaseHelper);
            _typeTable[19] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[20] = typeof(global::GalaSoft.MvvmLight.Command.RelayCommand);
            _typeTable[21] = typeof(global::mySpotter.Views.UserGunSetupView);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[23] = typeof(global::mySpotter.Views.PiManagerView);
            _typeTable[24] = typeof(global::mySpotter.MainPage);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[26] = typeof(global::mySpotter.Views.MainPageView);
            _typeTable[27] = typeof(global::mySpotter.MyTitleBar);
            _typeTable[28] = typeof(global::System.Double);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[30] = typeof(global::mySpotter.NavigationRootPage);
            _typeTable[31] = typeof(global::mySpotterLibrary.Models.MyArmory);
            _typeTable[32] = typeof(global::mySpotterLibrary.ViewModels.GunCatalogViewModel);
            _typeTable[33] = typeof(global::mySpotterLibrary.Common.BindableBase);
            _typeTable[34] = typeof(global::System.Int32);
            _typeTable[35] = typeof(global::mySpotterLibrary.Models.AmmoList);
            _typeTable[36] = typeof(global::mySpotterLibrary.Models.ScopeList);
            _typeTable[37] = typeof(global::GalaSoft.MvvmLight.Command.RelayCommand<global::mySpotterLibrary.Models.Gun>);
            _typeTable[38] = typeof(global::mySpotter.Views.GunCatalogPage);
            _typeTable[39] = typeof(global::mySpotter.Common.NavigationHelper);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[41] = typeof(global::mySpotter.Views.LoginControl);
            _typeTable[42] = typeof(global::mySpotterLibrary.ViewModels.RaspberryPiManager);
            _typeTable[43] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::mySpotterLibrary.Models.RaspberryPiInfo>);
            _typeTable[44] = typeof(global::System.Collections.ObjectModel.Collection<global::mySpotterLibrary.Models.RaspberryPiInfo>);
            _typeTable[45] = typeof(global::mySpotterLibrary.Models.RaspberryPiInfo);
            _typeTable[46] = typeof(global::GalaSoft.MvvmLight.Command.RelayCommand<global::mySpotterLibrary.Models.RaspberryPiInfo>);
            _typeTable[47] = typeof(global::mySpotter.Views.RecentHistoryView);
            _typeTable[48] = typeof(global::mySpotterLibrary.ViewModels.SessionViewModel);
            _typeTable[49] = typeof(global::Windows.UI.Xaml.Media.Imaging.WriteableBitmap);
            _typeTable[50] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::mySpotterLibrary.Models.LogMessage>);
            _typeTable[51] = typeof(global::System.Collections.ObjectModel.Collection<global::mySpotterLibrary.Models.LogMessage>);
            _typeTable[52] = typeof(global::mySpotterLibrary.Models.LogMessage);
            _typeTable[53] = typeof(global::mySpotterLibrary.Helpers.ImageHelper);
            _typeTable[54] = typeof(global::System.Byte[]);
            _typeTable[55] = typeof(global::System.Array);
            _typeTable[56] = typeof(global::System.Byte);
            _typeTable[57] = typeof(global::System.ValueType);
            _typeTable[58] = typeof(global::mySpotter.Views.SessionPage);
            _typeTable[59] = typeof(global::mySpotterLibrary.ViewModels.SetupSessionViewModel);
            _typeTable[60] = typeof(global::mySpotter.Views.SetupSessionView);
            _typeTable[61] = typeof(global::mySpotter.Views.UserGunSetupDetailPage);
            _typeTable[62] = typeof(global::mySpotterLibrary.Common.NavigationHelper);
            _typeTable[63] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[64] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[65] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[66] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[67] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[68] = typeof(global::Microsoft.Xaml.Interactions.Core.CallMethodAction);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BooleanNegationConverter() { return new global::mySpotterLibrary.Common.BooleanNegationConverter(); }
        private object Activate_2_ValueToStringConverter() { return new global::mySpotterLibrary.Common.ValueToStringConverter(); }
        private object Activate_3_ColorStringConverter() { return new global::mySpotterLibrary.Common.ColorStringConverter(); }
        private object Activate_4_DoubleToIntConverter() { return new global::mySpotterLibrary.Common.DoubleToIntConverter(); }
        private object Activate_5_ValueToFontFamilyConverter() { return new global::mySpotterLibrary.Common.ValueToFontFamilyConverter(); }
        private object Activate_6_ComboBoxItemToStringConverter() { return new global::mySpotterLibrary.Common.ComboBoxItemToStringConverter(); }
        private object Activate_7_BooleanToVisibilityConverter() { return new global::mySpotterLibrary.Common.BooleanToVisibilityConverter(); }
        private object Activate_8_NullableBooleanToBooleanConverter() { return new global::mySpotterLibrary.Common.NullableBooleanToBooleanConverter(); }
        private object Activate_9_StringToBrushConverter() { return new global::mySpotterLibrary.Common.StringToBrushConverter(); }
        private object Activate_10_MainPageViewModel() { return new global::mySpotterLibrary.ViewModels.MainPageViewModel(); }
        private object Activate_12_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_15_UserGunSetupViewModel() { return new global::mySpotterLibrary.ViewModels.UserGunSetupViewModel(); }
        private object Activate_16_UserGunSetup() { return new global::mySpotterLibrary.Models.UserGunSetup(); }
        private object Activate_17_GunCatalog() { return new global::mySpotterLibrary.Models.GunCatalog(); }
        private object Activate_21_UserGunSetupView() { return new global::mySpotter.Views.UserGunSetupView(); }
        private object Activate_23_PiManagerView() { return new global::mySpotter.Views.PiManagerView(); }
        private object Activate_24_MainPage() { return new global::mySpotter.MainPage(); }
        private object Activate_26_MainPageView() { return new global::mySpotter.Views.MainPageView(); }
        private object Activate_27_MyTitleBar() { return new global::mySpotter.MyTitleBar(); }
        private object Activate_30_NavigationRootPage() { return new global::mySpotter.NavigationRootPage(); }
        private object Activate_31_MyArmory() { return new global::mySpotterLibrary.Models.MyArmory(); }
        private object Activate_32_GunCatalogViewModel() { return new global::mySpotterLibrary.ViewModels.GunCatalogViewModel(); }
        private object Activate_33_BindableBase() { return new global::mySpotterLibrary.Common.BindableBase(); }
        private object Activate_35_AmmoList() { return new global::mySpotterLibrary.Models.AmmoList(); }
        private object Activate_36_ScopeList() { return new global::mySpotterLibrary.Models.ScopeList(); }
        private object Activate_38_GunCatalogPage() { return new global::mySpotter.Views.GunCatalogPage(); }
        private object Activate_41_LoginControl() { return new global::mySpotter.Views.LoginControl(); }
        private object Activate_42_RaspberryPiManager() { return new global::mySpotterLibrary.ViewModels.RaspberryPiManager(); }
        private object Activate_43_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::mySpotterLibrary.Models.RaspberryPiInfo>(); }
        private object Activate_44_Collection() { return new global::System.Collections.ObjectModel.Collection<global::mySpotterLibrary.Models.RaspberryPiInfo>(); }
        private object Activate_45_RaspberryPiInfo() { return new global::mySpotterLibrary.Models.RaspberryPiInfo(); }
        private object Activate_47_RecentHistoryView() { return new global::mySpotter.Views.RecentHistoryView(); }
        private object Activate_48_SessionViewModel() { return new global::mySpotterLibrary.ViewModels.SessionViewModel(); }
        private object Activate_50_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::mySpotterLibrary.Models.LogMessage>(); }
        private object Activate_51_Collection() { return new global::System.Collections.ObjectModel.Collection<global::mySpotterLibrary.Models.LogMessage>(); }
        private object Activate_53_ImageHelper() { return new global::mySpotterLibrary.Helpers.ImageHelper(); }
        private object Activate_58_SessionPage() { return new global::mySpotter.Views.SessionPage(); }
        private object Activate_59_SetupSessionViewModel() { return new global::mySpotterLibrary.ViewModels.SetupSessionViewModel(); }
        private object Activate_60_SetupSessionView() { return new global::mySpotter.Views.SetupSessionView(); }
        private object Activate_61_UserGunSetupDetailPage() { return new global::mySpotter.Views.UserGunSetupDetailPage(); }
        private object Activate_64_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_66_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_67_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_68_CallMethodAction() { return new global::Microsoft.Xaml.Interactions.Core.CallMethodAction(); }
        private void VectorAdd_43_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mySpotterLibrary.Models.RaspberryPiInfo>)instance;
            var newItem = (global::mySpotterLibrary.Models.RaspberryPiInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mySpotterLibrary.Models.RaspberryPiInfo>)instance;
            var newItem = (global::mySpotterLibrary.Models.RaspberryPiInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_50_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mySpotterLibrary.Models.LogMessage>)instance;
            var newItem = (global::mySpotterLibrary.Models.LogMessage)item;
            collection.Add(newItem);
        }
        private void VectorAdd_51_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::mySpotterLibrary.Models.LogMessage>)instance;
            var newItem = (global::mySpotterLibrary.Models.LogMessage)item;
            collection.Add(newItem);
        }
        private void VectorAdd_64_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_67_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  mySpotterLibrary.Common.BooleanNegationConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_BooleanNegationConverter;
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  mySpotterLibrary.Common.ValueToStringConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_ValueToStringConverter;
                xamlType = userType;
                break;

            case 3:   //  mySpotterLibrary.Common.ColorStringConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_ColorStringConverter;
                xamlType = userType;
                break;

            case 4:   //  mySpotterLibrary.Common.DoubleToIntConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_DoubleToIntConverter;
                xamlType = userType;
                break;

            case 5:   //  mySpotterLibrary.Common.ValueToFontFamilyConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_ValueToFontFamilyConverter;
                xamlType = userType;
                break;

            case 6:   //  mySpotterLibrary.Common.ComboBoxItemToStringConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_ComboBoxItemToStringConverter;
                xamlType = userType;
                break;

            case 7:   //  mySpotterLibrary.Common.BooleanToVisibilityConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case 8:   //  mySpotterLibrary.Common.NullableBooleanToBooleanConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_NullableBooleanToBooleanConverter;
                xamlType = userType;
                break;

            case 9:   //  mySpotterLibrary.Common.StringToBrushConverter
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_StringToBrushConverter;
                xamlType = userType;
                break;

            case 10:   //  mySpotterLibrary.ViewModels.MainPageViewModel
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_10_MainPageViewModel;
                userType.AddMemberName("UserName");
                xamlType = userType;
                break;

            case 11:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                userType.AddMemberName("IsInDesignMode");
                xamlType = userType;
                break;

            case 12:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_ObservableObject;
                xamlType = userType;
                break;

            case 13:   //  String
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Boolean
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  mySpotterLibrary.ViewModels.UserGunSetupViewModel
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_15_UserGunSetupViewModel;
                userType.AddMemberName("IsEditable");
                userType.AddMemberName("IsSaved");
                userType.AddMemberName("Setup");
                userType.AddMemberName("Groups");
                userType.AddMemberName("DbHelper");
                userType.AddMemberName("GetNextGunCommand");
                userType.AddMemberName("LoadGunGroupCommand");
                userType.AddMemberName("SaveSetupCommand");
                userType.AddMemberName("AcceptAndShootCommand");
                xamlType = userType;
                break;

            case 16:   //  mySpotterLibrary.Models.UserGunSetup
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  mySpotterLibrary.Models.GunCatalog
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  mySpotterLibrary.Helpers.DatabaseHelper
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  System.Windows.Input.ICommand
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  GalaSoft.MvvmLight.Command.RelayCommand
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  mySpotter.Views.UserGunSetupView
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_UserGunSetupView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  mySpotter.Views.PiManagerView
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_PiManagerView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  mySpotter.MainPage
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  mySpotter.Views.MainPageView
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_26_MainPageView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  mySpotter.MyTitleBar
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_MyTitleBar;
                userType.AddMemberName("Title");
                userType.AddMemberName("WideLayoutThreshold");
                userType.AddMemberName("GoBackCommand");
                userType.AddMemberName("CoreTitleBarPadding");
                userType.AddMemberName("CoreTitleBarHeight");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Double
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  mySpotter.NavigationRootPage
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_NavigationRootPage;
                userType.AddMemberName("Setups");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  mySpotterLibrary.Models.MyArmory
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  mySpotterLibrary.ViewModels.GunCatalogViewModel
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("mySpotterLibrary.Common.BindableBase"));
                userType.Activator = Activate_32_GunCatalogViewModel;
                userType.AddMemberName("GunId");
                userType.AddMemberName("ammo");
                userType.AddMemberName("scopes");
                userType.AddMemberName("Guns");
                userType.AddMemberName("DatabaseHelper");
                userType.AddMemberName("GetGunStatsCommand");
                userType.AddMemberName("UpdateGunCommand");
                userType.AddMemberName("PreviousGun");
                userType.AddMemberName("DeleteGun");
                xamlType = userType;
                break;

            case 33:   //  mySpotterLibrary.Common.BindableBase
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_BindableBase;
                xamlType = userType;
                break;

            case 34:   //  Int32
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  mySpotterLibrary.Models.AmmoList
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  mySpotterLibrary.Models.ScopeList
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  GalaSoft.MvvmLight.Command.RelayCommand`1<mySpotterLibrary.Models.Gun>
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  mySpotter.Views.GunCatalogPage
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_GunCatalogPage;
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  mySpotter.Common.NavigationHelper
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  mySpotter.Views.LoginControl
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_LoginControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  mySpotterLibrary.ViewModels.RaspberryPiManager
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_42_RaspberryPiManager;
                userType.AddMemberName("PiCatalog");
                userType.AddMemberName("IsEditable");
                userType.AddMemberName("NewIsDefault");
                userType.AddMemberName("NewName");
                userType.AddMemberName("NewIPAddress");
                userType.AddMemberName("DefaultPi");
                userType.AddMemberName("SetNewDefaultPiCommand");
                userType.AddMemberName("AddNewDefaultPiCommand");
                xamlType = userType;
                break;

            case 43:   //  System.Collections.ObjectModel.ObservableCollection`1<mySpotterLibrary.Models.RaspberryPiInfo>
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<mySpotterLibrary.Models.RaspberryPiInfo>"));
                userType.CollectionAdd = VectorAdd_43_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  System.Collections.ObjectModel.Collection`1<mySpotterLibrary.Models.RaspberryPiInfo>
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_44_Collection;
                userType.CollectionAdd = VectorAdd_44_Collection;
                xamlType = userType;
                break;

            case 45:   //  mySpotterLibrary.Models.RaspberryPiInfo
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_RaspberryPiInfo;
                userType.AddMemberName("RaspberryPiId");
                userType.AddMemberName("Name");
                userType.AddMemberName("IpAddress");
                userType.AddMemberName("Port");
                userType.AddMemberName("isDefault");
                xamlType = userType;
                break;

            case 46:   //  GalaSoft.MvvmLight.Command.RelayCommand`1<mySpotterLibrary.Models.RaspberryPiInfo>
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  mySpotter.Views.RecentHistoryView
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_RecentHistoryView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  mySpotterLibrary.ViewModels.SessionViewModel
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_48_SessionViewModel;
                userType.AddMemberName("receivedMessage");
                userType.AddMemberName("MyImageSource");
                userType.AddMemberName("Log");
                userType.AddMemberName("PiInfo");
                userType.AddMemberName("ImgHelper");
                userType.AddMemberName("DbHelper");
                userType.AddMemberName("UserSetup");
                userType.AddMemberName("TargetImageBytes");
                userType.AddMemberName("ConnectToPiCommand");
                userType.AddMemberName("SendRefPhotoCommand");
                xamlType = userType;
                break;

            case 49:   //  Windows.UI.Xaml.Media.Imaging.WriteableBitmap
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  System.Collections.ObjectModel.ObservableCollection`1<mySpotterLibrary.Models.LogMessage>
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<mySpotterLibrary.Models.LogMessage>"));
                userType.CollectionAdd = VectorAdd_50_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 51:   //  System.Collections.ObjectModel.Collection`1<mySpotterLibrary.Models.LogMessage>
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_51_Collection;
                userType.CollectionAdd = VectorAdd_51_Collection;
                xamlType = userType;
                break;

            case 52:   //  mySpotterLibrary.Models.LogMessage
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Message");
                userType.AddMemberName("TimeStamp");
                xamlType = userType;
                break;

            case 53:   //  mySpotterLibrary.Helpers.ImageHelper
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 54:   //  Byte[]
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  System.Array
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 56:   //  Byte
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 57:   //  System.ValueType
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 58:   //  mySpotter.Views.SessionPage
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_58_SessionPage;
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  mySpotterLibrary.ViewModels.SetupSessionViewModel
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("mySpotterLibrary.Common.BindableBase"));
                userType.Activator = Activate_59_SetupSessionViewModel;
                userType.AddMemberName("UserName");
                userType.AddMemberName("PiInfo");
                xamlType = userType;
                break;

            case 60:   //  mySpotter.Views.SetupSessionView
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_60_SetupSessionView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  mySpotter.Views.UserGunSetupDetailPage
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_61_UserGunSetupDetailPage;
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 62:   //  mySpotterLibrary.Common.NavigationHelper
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 64:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_64_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 65:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 66:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_66_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 67:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_67_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  Microsoft.Xaml.Interactions.Core.CallMethodAction
                userType = new global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_68_CallMethodAction;
                userType.AddMemberName("MethodName");
                userType.AddMemberName("TargetObject");
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MainPageViewModel_UserName(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.MainPageViewModel)instance;
            return that.UserName;
        }
        private void set_0_MainPageViewModel_UserName(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.MainPageViewModel)instance;
            that.UserName = (global::System.String)Value;
        }
        private object get_1_ViewModelBase_IsInDesignMode(object instance)
        {
            var that = (global::GalaSoft.MvvmLight.ViewModelBase)instance;
            return that.IsInDesignMode;
        }
        private object get_2_UserGunSetupViewModel_IsEditable(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.IsEditable;
        }
        private void set_2_UserGunSetupViewModel_IsEditable(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            that.IsEditable = (global::System.Boolean)Value;
        }
        private object get_3_UserGunSetupViewModel_IsSaved(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.IsSaved;
        }
        private void set_3_UserGunSetupViewModel_IsSaved(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            that.IsSaved = (global::System.Boolean)Value;
        }
        private object get_4_UserGunSetupViewModel_Setup(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.Setup;
        }
        private void set_4_UserGunSetupViewModel_Setup(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            that.Setup = (global::mySpotterLibrary.Models.UserGunSetup)Value;
        }
        private object get_5_UserGunSetupViewModel_Groups(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.Groups;
        }
        private void set_5_UserGunSetupViewModel_Groups(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            that.Groups = (global::mySpotterLibrary.Models.GunCatalog)Value;
        }
        private object get_6_UserGunSetupViewModel_DbHelper(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.DbHelper;
        }
        private void set_6_UserGunSetupViewModel_DbHelper(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            that.DbHelper = (global::mySpotterLibrary.Helpers.DatabaseHelper)Value;
        }
        private object get_7_UserGunSetupViewModel_GetNextGunCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.GetNextGunCommand;
        }
        private object get_8_UserGunSetupViewModel_LoadGunGroupCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.LoadGunGroupCommand;
        }
        private object get_9_UserGunSetupViewModel_SaveSetupCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.SaveSetupCommand;
        }
        private object get_10_UserGunSetupViewModel_AcceptAndShootCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)instance;
            return that.AcceptAndShootCommand;
        }
        private object get_11_MyTitleBar_Title(object instance)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            return that.Title;
        }
        private void set_11_MyTitleBar_Title(object instance, object Value)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            that.Title = (global::System.Object)Value;
        }
        private object get_12_MyTitleBar_WideLayoutThreshold(object instance)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            return that.WideLayoutThreshold;
        }
        private void set_12_MyTitleBar_WideLayoutThreshold(object instance, object Value)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            that.WideLayoutThreshold = (global::System.Double)Value;
        }
        private object get_13_MyTitleBar_GoBackCommand(object instance)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            return that.GoBackCommand;
        }
        private object get_14_MyTitleBar_CoreTitleBarPadding(object instance)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            return that.CoreTitleBarPadding;
        }
        private object get_15_MyTitleBar_CoreTitleBarHeight(object instance)
        {
            var that = (global::mySpotter.MyTitleBar)instance;
            return that.CoreTitleBarHeight;
        }
        private object get_16_NavigationRootPage_Setups(object instance)
        {
            var that = (global::mySpotter.NavigationRootPage)instance;
            return that.Setups;
        }
        private object get_17_GunCatalogViewModel_GunId(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.GunId;
        }
        private void set_17_GunCatalogViewModel_GunId(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.GunId = (global::System.Int32)Value;
        }
        private object get_18_GunCatalogViewModel_ammo(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.ammo;
        }
        private void set_18_GunCatalogViewModel_ammo(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.ammo = (global::mySpotterLibrary.Models.AmmoList)Value;
        }
        private object get_19_GunCatalogViewModel_scopes(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.scopes;
        }
        private void set_19_GunCatalogViewModel_scopes(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.scopes = (global::mySpotterLibrary.Models.ScopeList)Value;
        }
        private object get_20_GunCatalogViewModel_Guns(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.Guns;
        }
        private void set_20_GunCatalogViewModel_Guns(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.Guns = (global::mySpotterLibrary.Models.GunCatalog)Value;
        }
        private object get_21_GunCatalogViewModel_DatabaseHelper(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.DatabaseHelper;
        }
        private void set_21_GunCatalogViewModel_DatabaseHelper(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.DatabaseHelper = (global::mySpotterLibrary.Helpers.DatabaseHelper)Value;
        }
        private object get_22_GunCatalogViewModel_GetGunStatsCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.GetGunStatsCommand;
        }
        private object get_23_GunCatalogViewModel_UpdateGunCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.UpdateGunCommand;
        }
        private object get_24_GunCatalogViewModel_PreviousGun(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.PreviousGun;
        }
        private void set_24_GunCatalogViewModel_PreviousGun(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.PreviousGun = (global::GalaSoft.MvvmLight.Command.RelayCommand)Value;
        }
        private object get_25_GunCatalogViewModel_DeleteGun(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            return that.DeleteGun;
        }
        private void set_25_GunCatalogViewModel_DeleteGun(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.GunCatalogViewModel)instance;
            that.DeleteGun = (global::GalaSoft.MvvmLight.Command.RelayCommand)Value;
        }
        private object get_26_GunCatalogPage_NavigationHelper(object instance)
        {
            var that = (global::mySpotter.Views.GunCatalogPage)instance;
            return that.NavigationHelper;
        }
        private object get_27_RaspberryPiManager_PiCatalog(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.PiCatalog;
        }
        private void set_27_RaspberryPiManager_PiCatalog(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            that.PiCatalog = (global::System.Collections.ObjectModel.ObservableCollection<global::mySpotterLibrary.Models.RaspberryPiInfo>)Value;
        }
        private object get_28_RaspberryPiInfo_RaspberryPiId(object instance)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            return that.RaspberryPiId;
        }
        private void set_28_RaspberryPiInfo_RaspberryPiId(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            that.RaspberryPiId = (global::System.Int32)Value;
        }
        private object get_29_RaspberryPiInfo_Name(object instance)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            return that.Name;
        }
        private void set_29_RaspberryPiInfo_Name(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_30_RaspberryPiInfo_IpAddress(object instance)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            return that.IpAddress;
        }
        private void set_30_RaspberryPiInfo_IpAddress(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            that.IpAddress = (global::System.String)Value;
        }
        private object get_31_RaspberryPiInfo_Port(object instance)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            return that.Port;
        }
        private void set_31_RaspberryPiInfo_Port(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            that.Port = (global::System.String)Value;
        }
        private object get_32_RaspberryPiInfo_isDefault(object instance)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            return that.isDefault;
        }
        private void set_32_RaspberryPiInfo_isDefault(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.RaspberryPiInfo)instance;
            that.isDefault = (global::System.Boolean)Value;
        }
        private object get_33_RaspberryPiManager_IsEditable(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.IsEditable;
        }
        private void set_33_RaspberryPiManager_IsEditable(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            that.IsEditable = (global::System.Boolean)Value;
        }
        private object get_34_RaspberryPiManager_NewIsDefault(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.NewIsDefault;
        }
        private void set_34_RaspberryPiManager_NewIsDefault(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            that.NewIsDefault = (global::System.Boolean)Value;
        }
        private object get_35_RaspberryPiManager_NewName(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.NewName;
        }
        private void set_35_RaspberryPiManager_NewName(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            that.NewName = (global::System.String)Value;
        }
        private object get_36_RaspberryPiManager_NewIPAddress(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.NewIPAddress;
        }
        private void set_36_RaspberryPiManager_NewIPAddress(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            that.NewIPAddress = (global::System.String)Value;
        }
        private object get_37_RaspberryPiManager_DefaultPi(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.DefaultPi;
        }
        private void set_37_RaspberryPiManager_DefaultPi(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            that.DefaultPi = (global::mySpotterLibrary.Models.RaspberryPiInfo)Value;
        }
        private object get_38_RaspberryPiManager_SetNewDefaultPiCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.SetNewDefaultPiCommand;
        }
        private object get_39_RaspberryPiManager_AddNewDefaultPiCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.RaspberryPiManager)instance;
            return that.AddNewDefaultPiCommand;
        }
        private object get_40_SessionViewModel_receivedMessage(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.receivedMessage;
        }
        private void set_40_SessionViewModel_receivedMessage(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.receivedMessage = (global::System.String)Value;
        }
        private object get_41_SessionViewModel_MyImageSource(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.MyImageSource;
        }
        private void set_41_SessionViewModel_MyImageSource(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.MyImageSource = (global::Windows.UI.Xaml.Media.Imaging.WriteableBitmap)Value;
        }
        private object get_42_SessionViewModel_Log(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.Log;
        }
        private void set_42_SessionViewModel_Log(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.Log = (global::System.Collections.ObjectModel.ObservableCollection<global::mySpotterLibrary.Models.LogMessage>)Value;
        }
        private object get_43_LogMessage_Message(object instance)
        {
            var that = (global::mySpotterLibrary.Models.LogMessage)instance;
            return that.Message;
        }
        private void set_43_LogMessage_Message(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.LogMessage)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_44_LogMessage_TimeStamp(object instance)
        {
            var that = (global::mySpotterLibrary.Models.LogMessage)instance;
            return that.TimeStamp;
        }
        private void set_44_LogMessage_TimeStamp(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.Models.LogMessage)instance;
            that.TimeStamp = (global::System.String)Value;
        }
        private object get_45_SessionViewModel_PiInfo(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.PiInfo;
        }
        private void set_45_SessionViewModel_PiInfo(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.PiInfo = (global::mySpotterLibrary.Models.RaspberryPiInfo)Value;
        }
        private object get_46_SessionViewModel_ImgHelper(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.ImgHelper;
        }
        private void set_46_SessionViewModel_ImgHelper(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.ImgHelper = (global::mySpotterLibrary.Helpers.ImageHelper)Value;
        }
        private object get_47_SessionViewModel_DbHelper(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.DbHelper;
        }
        private void set_47_SessionViewModel_DbHelper(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.DbHelper = (global::mySpotterLibrary.Helpers.DatabaseHelper)Value;
        }
        private object get_48_SessionViewModel_UserSetup(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.UserSetup;
        }
        private void set_48_SessionViewModel_UserSetup(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.UserSetup = (global::mySpotterLibrary.ViewModels.UserGunSetupViewModel)Value;
        }
        private object get_49_SessionViewModel_TargetImageBytes(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.TargetImageBytes;
        }
        private void set_49_SessionViewModel_TargetImageBytes(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            that.TargetImageBytes = (global::System.Byte[])Value;
        }
        private object get_50_SessionViewModel_ConnectToPiCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.ConnectToPiCommand;
        }
        private object get_51_SessionViewModel_SendRefPhotoCommand(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SessionViewModel)instance;
            return that.SendRefPhotoCommand;
        }
        private object get_52_SessionPage_NavigationHelper(object instance)
        {
            var that = (global::mySpotter.Views.SessionPage)instance;
            return that.NavigationHelper;
        }
        private object get_53_SetupSessionViewModel_UserName(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SetupSessionViewModel)instance;
            return that.UserName;
        }
        private void set_53_SetupSessionViewModel_UserName(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SetupSessionViewModel)instance;
            that.UserName = (global::System.String)Value;
        }
        private object get_54_SetupSessionViewModel_PiInfo(object instance)
        {
            var that = (global::mySpotterLibrary.ViewModels.SetupSessionViewModel)instance;
            return that.PiInfo;
        }
        private void set_54_SetupSessionViewModel_PiInfo(object instance, object Value)
        {
            var that = (global::mySpotterLibrary.ViewModels.SetupSessionViewModel)instance;
            that.PiInfo = (global::mySpotterLibrary.Models.RaspberryPiInfo)Value;
        }
        private object get_55_UserGunSetupDetailPage_NavigationHelper(object instance)
        {
            var that = (global::mySpotter.Views.UserGunSetupDetailPage)instance;
            return that.NavigationHelper;
        }
        private object get_56_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_56_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_57_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_58_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_58_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_59_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_59_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_60_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_61_CallMethodAction_MethodName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            return that.MethodName;
        }
        private void set_61_CallMethodAction_MethodName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            that.MethodName = (global::System.String)Value;
        }
        private object get_62_CallMethodAction_TargetObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            return that.TargetObject;
        }
        private void set_62_CallMethodAction_TargetObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            that.TargetObject = (global::System.Object)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::mySpotter.mySpotter_XamlTypeInfo.XamlMember xamlMember = null;
            global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "mySpotterLibrary.ViewModels.MainPageViewModel.UserName":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.MainPageViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "UserName", "String");
                xamlMember.Getter = get_0_MainPageViewModel_UserName;
                xamlMember.Setter = set_0_MainPageViewModel_UserName;
                break;
            case "GalaSoft.MvvmLight.ViewModelBase.IsInDesignMode":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "IsInDesignMode", "Boolean");
                xamlMember.Getter = get_1_ViewModelBase_IsInDesignMode;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.IsEditable":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "IsEditable", "Boolean");
                xamlMember.Getter = get_2_UserGunSetupViewModel_IsEditable;
                xamlMember.Setter = set_2_UserGunSetupViewModel_IsEditable;
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.IsSaved":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "IsSaved", "Boolean");
                xamlMember.Getter = get_3_UserGunSetupViewModel_IsSaved;
                xamlMember.Setter = set_3_UserGunSetupViewModel_IsSaved;
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.Setup":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Setup", "mySpotterLibrary.Models.UserGunSetup");
                xamlMember.Getter = get_4_UserGunSetupViewModel_Setup;
                xamlMember.Setter = set_4_UserGunSetupViewModel_Setup;
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.Groups":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Groups", "mySpotterLibrary.Models.GunCatalog");
                xamlMember.Getter = get_5_UserGunSetupViewModel_Groups;
                xamlMember.Setter = set_5_UserGunSetupViewModel_Groups;
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.DbHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "DbHelper", "mySpotterLibrary.Helpers.DatabaseHelper");
                xamlMember.Getter = get_6_UserGunSetupViewModel_DbHelper;
                xamlMember.Setter = set_6_UserGunSetupViewModel_DbHelper;
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.GetNextGunCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "GetNextGunCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_7_UserGunSetupViewModel_GetNextGunCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.LoadGunGroupCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "LoadGunGroupCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_8_UserGunSetupViewModel_LoadGunGroupCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.SaveSetupCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "SaveSetupCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_9_UserGunSetupViewModel_SaveSetupCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.UserGunSetupViewModel.AcceptAndShootCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "AcceptAndShootCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_10_UserGunSetupViewModel_AcceptAndShootCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotter.MyTitleBar.Title":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.MyTitleBar");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Title", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_MyTitleBar_Title;
                xamlMember.Setter = set_11_MyTitleBar_Title;
                break;
            case "mySpotter.MyTitleBar.WideLayoutThreshold":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.MyTitleBar");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "WideLayoutThreshold", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_MyTitleBar_WideLayoutThreshold;
                xamlMember.Setter = set_12_MyTitleBar_WideLayoutThreshold;
                break;
            case "mySpotter.MyTitleBar.GoBackCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.MyTitleBar");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "GoBackCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_13_MyTitleBar_GoBackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotter.MyTitleBar.CoreTitleBarPadding":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.MyTitleBar");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "CoreTitleBarPadding", "Windows.UI.Xaml.Thickness");
                xamlMember.Getter = get_14_MyTitleBar_CoreTitleBarPadding;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotter.MyTitleBar.CoreTitleBarHeight":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.MyTitleBar");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "CoreTitleBarHeight", "Double");
                xamlMember.Getter = get_15_MyTitleBar_CoreTitleBarHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotter.NavigationRootPage.Setups":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.NavigationRootPage");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Setups", "mySpotterLibrary.Models.MyArmory");
                xamlMember.Getter = get_16_NavigationRootPage_Setups;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.GunId":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "GunId", "Int32");
                xamlMember.Getter = get_17_GunCatalogViewModel_GunId;
                xamlMember.Setter = set_17_GunCatalogViewModel_GunId;
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.ammo":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "ammo", "mySpotterLibrary.Models.AmmoList");
                xamlMember.Getter = get_18_GunCatalogViewModel_ammo;
                xamlMember.Setter = set_18_GunCatalogViewModel_ammo;
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.scopes":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "scopes", "mySpotterLibrary.Models.ScopeList");
                xamlMember.Getter = get_19_GunCatalogViewModel_scopes;
                xamlMember.Setter = set_19_GunCatalogViewModel_scopes;
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.Guns":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Guns", "mySpotterLibrary.Models.GunCatalog");
                xamlMember.Getter = get_20_GunCatalogViewModel_Guns;
                xamlMember.Setter = set_20_GunCatalogViewModel_Guns;
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.DatabaseHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "DatabaseHelper", "mySpotterLibrary.Helpers.DatabaseHelper");
                xamlMember.Getter = get_21_GunCatalogViewModel_DatabaseHelper;
                xamlMember.Setter = set_21_GunCatalogViewModel_DatabaseHelper;
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.GetGunStatsCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "GetGunStatsCommand", "GalaSoft.MvvmLight.Command.RelayCommand`1<mySpotterLibrary.Models.Gun>");
                xamlMember.Getter = get_22_GunCatalogViewModel_GetGunStatsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.UpdateGunCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "UpdateGunCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_23_GunCatalogViewModel_UpdateGunCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.PreviousGun":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "PreviousGun", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_24_GunCatalogViewModel_PreviousGun;
                xamlMember.Setter = set_24_GunCatalogViewModel_PreviousGun;
                break;
            case "mySpotterLibrary.ViewModels.GunCatalogViewModel.DeleteGun":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.GunCatalogViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "DeleteGun", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_25_GunCatalogViewModel_DeleteGun;
                xamlMember.Setter = set_25_GunCatalogViewModel_DeleteGun;
                break;
            case "mySpotter.Views.GunCatalogPage.NavigationHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.Views.GunCatalogPage");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "NavigationHelper", "mySpotter.Common.NavigationHelper");
                xamlMember.Getter = get_26_GunCatalogPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.PiCatalog":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "PiCatalog", "System.Collections.ObjectModel.ObservableCollection`1<mySpotterLibrary.Models.RaspberryPiInfo>");
                xamlMember.Getter = get_27_RaspberryPiManager_PiCatalog;
                xamlMember.Setter = set_27_RaspberryPiManager_PiCatalog;
                break;
            case "mySpotterLibrary.Models.RaspberryPiInfo.RaspberryPiId":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "RaspberryPiId", "Int32");
                xamlMember.Getter = get_28_RaspberryPiInfo_RaspberryPiId;
                xamlMember.Setter = set_28_RaspberryPiInfo_RaspberryPiId;
                break;
            case "mySpotterLibrary.Models.RaspberryPiInfo.Name":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_29_RaspberryPiInfo_Name;
                xamlMember.Setter = set_29_RaspberryPiInfo_Name;
                break;
            case "mySpotterLibrary.Models.RaspberryPiInfo.IpAddress":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "IpAddress", "String");
                xamlMember.Getter = get_30_RaspberryPiInfo_IpAddress;
                xamlMember.Setter = set_30_RaspberryPiInfo_IpAddress;
                break;
            case "mySpotterLibrary.Models.RaspberryPiInfo.Port":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Port", "String");
                xamlMember.Getter = get_31_RaspberryPiInfo_Port;
                xamlMember.Setter = set_31_RaspberryPiInfo_Port;
                break;
            case "mySpotterLibrary.Models.RaspberryPiInfo.isDefault":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "isDefault", "Boolean");
                xamlMember.Getter = get_32_RaspberryPiInfo_isDefault;
                xamlMember.Setter = set_32_RaspberryPiInfo_isDefault;
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.IsEditable":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "IsEditable", "Boolean");
                xamlMember.Getter = get_33_RaspberryPiManager_IsEditable;
                xamlMember.Setter = set_33_RaspberryPiManager_IsEditable;
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.NewIsDefault":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "NewIsDefault", "Boolean");
                xamlMember.Getter = get_34_RaspberryPiManager_NewIsDefault;
                xamlMember.Setter = set_34_RaspberryPiManager_NewIsDefault;
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.NewName":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "NewName", "String");
                xamlMember.Getter = get_35_RaspberryPiManager_NewName;
                xamlMember.Setter = set_35_RaspberryPiManager_NewName;
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.NewIPAddress":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "NewIPAddress", "String");
                xamlMember.Getter = get_36_RaspberryPiManager_NewIPAddress;
                xamlMember.Setter = set_36_RaspberryPiManager_NewIPAddress;
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.DefaultPi":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "DefaultPi", "mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember.Getter = get_37_RaspberryPiManager_DefaultPi;
                xamlMember.Setter = set_37_RaspberryPiManager_DefaultPi;
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.SetNewDefaultPiCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "SetNewDefaultPiCommand", "GalaSoft.MvvmLight.Command.RelayCommand`1<mySpotterLibrary.Models.RaspberryPiInfo>");
                xamlMember.Getter = get_38_RaspberryPiManager_SetNewDefaultPiCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.RaspberryPiManager.AddNewDefaultPiCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.RaspberryPiManager");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "AddNewDefaultPiCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_39_RaspberryPiManager_AddNewDefaultPiCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.receivedMessage":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "receivedMessage", "String");
                xamlMember.Getter = get_40_SessionViewModel_receivedMessage;
                xamlMember.Setter = set_40_SessionViewModel_receivedMessage;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.MyImageSource":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "MyImageSource", "Windows.UI.Xaml.Media.Imaging.WriteableBitmap");
                xamlMember.Getter = get_41_SessionViewModel_MyImageSource;
                xamlMember.Setter = set_41_SessionViewModel_MyImageSource;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.Log":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Log", "System.Collections.ObjectModel.ObservableCollection`1<mySpotterLibrary.Models.LogMessage>");
                xamlMember.Getter = get_42_SessionViewModel_Log;
                xamlMember.Setter = set_42_SessionViewModel_Log;
                break;
            case "mySpotterLibrary.Models.LogMessage.Message":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.LogMessage");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.Getter = get_43_LogMessage_Message;
                xamlMember.Setter = set_43_LogMessage_Message;
                break;
            case "mySpotterLibrary.Models.LogMessage.TimeStamp":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.Models.LogMessage");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "TimeStamp", "String");
                xamlMember.Getter = get_44_LogMessage_TimeStamp;
                xamlMember.Setter = set_44_LogMessage_TimeStamp;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.PiInfo":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "PiInfo", "mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember.Getter = get_45_SessionViewModel_PiInfo;
                xamlMember.Setter = set_45_SessionViewModel_PiInfo;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.ImgHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "ImgHelper", "mySpotterLibrary.Helpers.ImageHelper");
                xamlMember.Getter = get_46_SessionViewModel_ImgHelper;
                xamlMember.Setter = set_46_SessionViewModel_ImgHelper;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.DbHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "DbHelper", "mySpotterLibrary.Helpers.DatabaseHelper");
                xamlMember.Getter = get_47_SessionViewModel_DbHelper;
                xamlMember.Setter = set_47_SessionViewModel_DbHelper;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.UserSetup":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "UserSetup", "mySpotterLibrary.ViewModels.UserGunSetupViewModel");
                xamlMember.Getter = get_48_SessionViewModel_UserSetup;
                xamlMember.Setter = set_48_SessionViewModel_UserSetup;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.TargetImageBytes":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "TargetImageBytes", "Byte[]");
                xamlMember.Getter = get_49_SessionViewModel_TargetImageBytes;
                xamlMember.Setter = set_49_SessionViewModel_TargetImageBytes;
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.ConnectToPiCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "ConnectToPiCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_50_SessionViewModel_ConnectToPiCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.SessionViewModel.SendRefPhotoCommand":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "SendRefPhotoCommand", "GalaSoft.MvvmLight.Command.RelayCommand");
                xamlMember.Getter = get_51_SessionViewModel_SendRefPhotoCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotter.Views.SessionPage.NavigationHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.Views.SessionPage");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "NavigationHelper", "mySpotter.Common.NavigationHelper");
                xamlMember.Getter = get_52_SessionPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "mySpotterLibrary.ViewModels.SetupSessionViewModel.UserName":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SetupSessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "UserName", "String");
                xamlMember.Getter = get_53_SetupSessionViewModel_UserName;
                xamlMember.Setter = set_53_SetupSessionViewModel_UserName;
                break;
            case "mySpotterLibrary.ViewModels.SetupSessionViewModel.PiInfo":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotterLibrary.ViewModels.SetupSessionViewModel");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "PiInfo", "mySpotterLibrary.Models.RaspberryPiInfo");
                xamlMember.Getter = get_54_SetupSessionViewModel_PiInfo;
                xamlMember.Setter = set_54_SetupSessionViewModel_PiInfo;
                break;
            case "mySpotter.Views.UserGunSetupDetailPage.NavigationHelper":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("mySpotter.Views.UserGunSetupDetailPage");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "NavigationHelper", "mySpotterLibrary.Common.NavigationHelper");
                xamlMember.Getter = get_55_UserGunSetupDetailPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_56_Interaction_Behaviors;
                xamlMember.Setter = set_56_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_58_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_59_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_60_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.CallMethodAction.MethodName":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.CallMethodAction");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "MethodName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_CallMethodAction_MethodName;
                xamlMember.Setter = set_61_CallMethodAction_MethodName;
                break;
            case "Microsoft.Xaml.Interactions.Core.CallMethodAction.TargetObject":
                userType = (global::mySpotter.mySpotter_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.CallMethodAction");
                xamlMember = new global::mySpotter.mySpotter_XamlTypeInfo.XamlMember(this, "TargetObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_CallMethodAction_TargetObject;
                xamlMember.Setter = set_62_CallMethodAction_TargetObject;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::mySpotter.mySpotter_XamlTypeInfo.XamlSystemBaseType
    {
        global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::mySpotter.mySpotter_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

